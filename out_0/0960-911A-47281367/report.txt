int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
size = int and in = int array of size 100005	int in [ 100005 ], size ;
	int size , in [ 100005 ] ;	NA
d1 = int vector	vector < int > d1 ;
	vector < int > d1 ;	1
read size	cin >> size ;
	cin >> size ;	1
read size values into in	for ( int i = 0 ; i < in. size ( ) ; i ++ ) { cin >> in [ i ] ; }
	for ( int i = 0 ; i < size ; i ++ ) { cin >> in [ i ] ; }	NA
mn = int with mn = 1e9	int mn = 1e9 ;
	int mn = 1e9 ;	1
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
	for ( int i = 0 ; i < size ; i ++ )	1
if in [ i ] < mn set mn to in [ i ]	if ( in [ i ] < mn ) mn = in [ j ] ;
	if ( in [ i ] < mn ) { mn = in [ i ] ; }	NA
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
	for ( int i = 0 ; i < size ; i ++ )	1
if mn is in [ i ] append i to d1	if ( mn == in [ i ] ) d1. push_back ( i ) ;
	if ( mn == in [ i ] ) { d1 . push_back ( i ) ; }	NA
}	}	}	DUMMY	DUMMY	DUMMY
mns = int with mns = 1e9	int mns = 1e9 ;
	int mns = 1e9 ;	1
for i = 0 to size of d1 - 1	for ( int i = 0 ; i < d1. size ( ) - 1 ; i ++ )
	for ( int i = 0 ; i < d1 . size ( ) - 1 ; i ++ )	NA
if absolute of d1 [ i ] - d1 [ i + 1 ] < mns set mns to ansolute of d1 [ i ] - d1 [ i + 1 ]	if ( abs ( d1. at ( i ) - d1 [ i + 1 ] ) < mns ) { mns = ans ( ( int ) abs ( ( ( long long ) d2 [ i ] ) - ( long double ) d3 [ i ) + 1 ) ) ; }
	if ( abs ( d1 [ i ] - d1 [ i + 1 ] ) < mns ) { mns = abs ( d1 [ i ] - d1 [ i + 1 ] ) ; }	NA
}	}	}	DUMMY	DUMMY	DUMMY
print mns	cout << mns << endl ;
	cout << mns << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
