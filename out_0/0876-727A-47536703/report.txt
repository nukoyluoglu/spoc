ASS = array of integers of length 50	intASS [ 50 ] ;
	int ASS [ 50 ] ;	NA
let sum be a integer	int sum ;
	int sum ;	1
let flag be a boolean value	bool flag ;
	bool flag ;	1
let int digui ( int a , int b ) accepts integer values	int digui ( int a, int b )
	int digui ( int a , int b )	NA
if a is less than b	if ( a < b )
	if ( a < b )	1
set the value of flag to 1	flag = 1 ;
	flag = 1 ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if a is equal to b , return 0	if ( a == b ) return 0 ;
	if ( a == b ) return 0 ;	1
if a modulo 2 is equal to 0	if ( a % 2 == 0 )
	if ( a % 2 == 0 )	1
increase sum by 1	sum ++ ;
	sum ++ ;	1
let ASS [ sum - 1 ] is equal to a / 2	ASS [ sum - 1 ] = a / 2 ;
	ASS [ sum - 1 ] = a / 2 ;	1
return digui of a / 2 , b	return digui ( a / 2, b ) ;
	return digui ( a / 2 , b ) ;	NA
else if a modulo 10 is equal to 1	else if ( a % 10 == 1 )
	else if ( a % 10 == 1 )	1
increase sum by 1	sum ++ ;
	sum ++ ;	1
let ASS [ sum - 1 ] is equal to ( a - 1 ) / 10	ASS [ sum - 1 ] = ( a - 1 ) / 10 ;
	ASS [ sum - 1 ] = ( a - 1 ) / 10 ;	1
return digui of ( a - 1 ) / 10 , b	return digui ( ( a - 1 ) / 10, b ) ;
	return digui ( ( a - 1 ) / 10 , b ) ;	NA
else do the following	else
	else	1
set the value of flag to 1	flag = 1 ;
	flag = 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
let m , n be integers	int m, n ;
	int m , n ;	NA
read m and n	cin >> m >> n ;
	cin >> m >> n ;	1
digui of n , m	digui ( n, m ) ;
	digui ( n , m ) ;	NA
if flag is equal to 0	if ( flag == 0 )
	if ( flag == 0 )	1
print YES and newline and sum + 1 and newline	cout << " YES\n " << sum + 1 << endl ;
	cout << " YES " << endl << sum + 1 << endl ;	NA
for integer i = sum - 1 , i > = 0 , decrease i by 1 , print ASS [ i ] and space	for ( int i = sum - 1 ; i >= 0 ; i -- ) cout << ASS [ i ] << " " ;
	for ( int i = sum - 1 ; i >= 0 ; i -- ) cout << ASS [ i ] << " " ;	1
print n and new line	cout << n << endl ;
	cout << n << endl ;	1
else do the following	else
	else	1
print NO and newline	cout << " NO " << endl ;
	cout << " NO " << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
