v = vector array of long long of size 100005	vector < long long > v [ 100005 ] ;
	vector < long long > v [ 100005 ] ;	1
in the function solve	void solve ( )
	void solve ( )	1
n , x , b , y , ans = long long with x = 0 , ans = 0	long long n, x = 0, b, y, ans = 0 ;
	long long n , x = 0 , b , y , ans = 0 ;	NA
read n	cin >> n ;
	cin >> n ;	1
a = array of long long of size n	long long a [ n ] ;
	long long a [ n ] ;	1
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
	for ( long long i = 0 ; i < n ; i ++ )	NA
read a [ i ]	cin >> a [ i ] ;
	cin >> a [ i ] ;	1
if i is 0	if ( i == 0 )
	if ( i == 0 )	1
append a [ i ] in v [ x ]	v [ x ]. push_back ( a [ i ] ) ;
	v [ x ] . push_back ( a [ i ] ) ;	NA
continue iteration	continue ;
	continue ;	1
}	}	}	DUMMY	DUMMY	DUMMY
if a [ i ] < = a [ i - 1 ] , increment x	if ( a [ i ] <= a [ j - 1 ] ) x ++ ;
	if ( a [ i ] <= a [ i - 1 ] ) x ++ ;	NA
append a [ i ] in v [ x ]	v [ x ]. push_back ( a [ i ] ) ;
	v [ x ] . push_back ( a [ i ] ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
if x is 0	if ( x == 0 )
	if ( x == 0 )	1
print v [ 0 ] . size ( )	cout << v [ 0 ]. size ( ) << endl ;
	cout << v [ 0 ] . size ( ) << ' \n ' ;	NA
return	return ;
	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to x + 1	for ( int i = 0 ; i < x + 1 ; i ++ )
	for ( long long i = 0 ; i < x + 1 ; i ++ )	NA
if i is x	if ( i == x )
	if ( i == x )	1
y = v [ i ] . size ( ) + 1	y = v [ i ]. size ( ) + 1 ;
	y = v [ i ] . size ( ) + 1 ;	NA
else	else
	else	1
n = long long with n = v [ i ] . size ( )	long long n = v [ i ]. size ( ) ;
	long long n = v [ i ] . size ( ) ;	NA
m = long long with m = v [ i + 1 ] . size ( )	long long m = v [ i + 1 ]. size ( ) ;
	long long m = v [ i + 1 ] . size ( ) ;	NA
if m is 1	if ( m == 1 )
	if ( m == 1 )	1
y = n + 1 ;	y = n + 1 ;
	y = n + 1 ;	1
else if n is 1	else if ( n == 1 )
	else if ( n == 1 )	1
y = m + 1	y = m + 1 ;
	y = m + 1 ;	1
else if v [ i + 1 ] [ 1 ] - v [ i ] [ n - 1 ] > 1	else if ( v [ i + 1 ] [ 1 ] - v [ j ] [ n - 1 ] > 1 )
	else if ( v [ i + 1 ] [ 1 ] - v [ i ] [ n - 1 ] > 1 )	NA
y = n + m	y = n + m ;
	y = n + m ;	1
else if v [ i + 1 ] [ 0 ] - v [ i ] [ n - 2 ] > 1	else if ( v [ i + 1 ] [ 0 ] - v [ j ] [ n - 2 ] > 1 )
	else if ( v [ i + 1 ] [ 0 ] - v [ i ] [ n - 2 ] > 1 )	NA
y = n + m	y = n + m ;
	y = n + m ;	1
else	else
	else	1
y = n + 1	y = n + 1 ;
	y = n + 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
ans = max of ans and y	ans = max ( ans, y ) ;
	ans = max ( ans , y ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
print ans	cout << ans << endl ;
	cout << ans << ' \n ' ;	NA
return	return ;
	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
TESTS = long long with TESTS = 1	long long TESTS = 1 ;
	long long TESTS = 1 ;	1
while postfix decrement TESTS , call solve	while ( TESTS -- ) { solve ( ) ; }
	while ( TESTS -- ) { solve ( ) ; }	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
