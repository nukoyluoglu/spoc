create constant integer N with N = 1e3 + 5	const int N = 1e3 + 5 ;
	const int N = 1e3 + 5 ;	1
create 2d boolean array mark with size N by N	bool mark [ n ] [ N ] ;
	bool mark [ N ] [ N ] ;	NA
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create integers n , m , k	int n, m, k ;
	int n , m , k ;	NA
read n read m read k	cin >> n >> m >> k ;
	cin >> n >> m >> k ;	1
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
	for ( int i = 0 ; i < k ; i ++ )	1
create integers x , y	int x, y ;
	int x , y ;	NA
read x read y	cin >> x >> y ;
	cin >> x >> y ;	1
set mark [ decrement x ] [ decrement y ] to true	mark [ -- x ] [ -- y ] = true ;
	mark [ -- x ] [ -- y ] = true ;	1
for a = x - 1 to x inclusive	for ( int a = x - 1 ; a <= x ; a ++ )
	for ( int a = x - 1 ; a <= x ; a ++ )	1
for b = y - 1 to y inclusive	for ( int b = y - 1 ; b <= y ; b ++ )
	for ( int b = y - 1 ; b <= y ; b ++ )	1
if bitwise not minimum of ( a and b ) and a + 1 is less than n and b + 1 is less than m	if ( ~ min ( a, b ) && a + 1 < n && b + i < m )
	if ( ~ min ( a , b ) && a + 1 < n && b + 1 < m )	NA
create boolean bad with bad = true	bool Bad = true ;
	bool bad = true ;	NA
for c = 0 to 4 exclusive , set bad to bad bitwise and mark [ a + ( c bitwise and 1 ) ] [ b + ( c bitshift right 1 bitwise and 1 ) ]	for ( int c = 0 ; c < 4 ; c ++ ) { bad &= mark [ a + ( c & 1 ) ] [ b + ( ( c << 1 ) ) ; }
	for ( int c = 0 ; c < 4 ; c ++ ) bad &= mark [ a + ( c & 1 ) ] [ b + ( c >> 1 & 1 ) ] ;	NA
if bad , return print i + 1 print newline , 0	if ( bad ) return cout << i + 1 << endl, 0 ;
	if ( bad ) return cout << i + 1 << endl , 0 ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print " 0 \ n "	cout << " 0\n " ;
	cout << " 0\n " ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
