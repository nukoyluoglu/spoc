create constant double PI = acos ( - 1 )	const double PI = acos ( - 1 ) ;
	const double PI = acos ( - 1 ) ;	1
let const integer MAX = 2e9 + 7	const int MAX = 2e9 + 7 ;
	const int MAX = 2e9 + 7 ;	1
let const long long MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;
	const long long MOD = 1e9 + 7 ;	1
create map m of chars to ints	map < char, int > m ;
	map < char , int > m ;	NA
declare solve	void solve ( )
	void solve ( )	1
let int k	int k ;
	int k ;	1
read k	cin >> k ;
	cin >> k ;	1
let string s	string s ;
	string s ;	1
read s	cin >> s ;
	cin >> s ;	1
create int n = s . size ( )	int n = s. size ( ) ;
	int n = s . size ( ) ;	NA
if n modulo k is not equal to 0	if ( n % k!= 0 )
	if ( n % k != 0 )	NA
print - 1	cout << - 1 << endl ;
	cout << - 1 << endl ;	1
terminate function	return ;
	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
create int need = n / k	int need = n / k ;
	int need = n / k ;	1
increment all contents of m [ s ]	memset ( m [ s ], 0, sizeof m [ i ] ) ;
	for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }	NA
let string t = " "	string t = " " ;
	string t = " " ;	1
for i = 97 to 123 exclusive	for ( int i = 97 ; i < 123 ; i ++ )
	for ( int i = 97 ; i < 123 ; i ++ )	1
if m [ char ( i ) ] modulo k is 0	if ( m [ char ( i ) ] % k == 0 )
	if ( m [ char ( i ) ] % k == 0 )	1
for j = 0 to m [ char ( i ) ] / k exclusive , set t to t + char ( i )	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( j ) ; }
	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( i ) ; }	NA
otherwise do	else
	else	1
print - 1	cout << - 1 << endl ;
	cout << - 1 << endl ;	1
end function	return ;
	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to k exclusive , print t	for ( int i = 0 ; i < k ; i ++ ) cout << t ;
	for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }	NA
print new line	cout << endl ;
	cout << endl ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
call solve	solve ( ) ;
	solve ( ) ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
