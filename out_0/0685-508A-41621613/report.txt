mp = two dimensional int array of sizes 1010 and 1010	int mp [ 1000 + 10 ] ;
	int mp [ 1010 ] [ 1010 ] ;	NA
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
m , n , k = int	int m, n, k ;
	int m , n , k ;	NA
read m then n then k	cin >> m >> n >> k ;
	cin >> m >> n >> k ;	1
set all values of mp to 0	memset ( mp, 0, sizeof ( mp ) ) ;
	memset ( mp , 0 , sizeof ( mp ) ) ;	NA
flog = int with flog = 0	int flog = 0 ;
	int flog = 0 ;	1
ans = int with ans = 0	int ans = 0 ;
	int ans = 0 ;	1
for i = 1 to k inclusive	for ( int i = 1 ; i <= k ; i ++ )
	for ( int i = 1 ; i <= k ; i ++ )	1
x , y = int	int x, y ;
	int x , y ;	NA
read x then y	cin >> x >> y ;
	cin >> x >> y ;	1
set mp [ x ] [ y ] to 1	mp [ x ] [ y ] = 1 ;
	mp [ x ] [ y ] = 1 ;	1
if flog is 0	if (! flog )
	if ( flog == 0 )	NA
if mp [ x - 1 ] [ y ] is not 0 and mp [ x - 1 ] [ y - 1 ] is not 0 and mp [ x ] [ y - 1 ] is not 0 then set flog to 1	if ( mp [ x - 1 ] [ y ] ) flog = 1 ;
	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;	NA
if mp [ x + 1 ] [ y ] is not 0 and mp [ x + 1 ] [ y + 1 ] is not 0 and mp [ x ] [ y + 1 ] is not 0 then set flog to 1	if ( mp [ x + 1 ] [ y ] ) flog = 1 ;
	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;	NA
if mp [ x - 1 ] [ y ] is not 0 and mp [ x - 1 ] [ y + 1 ] is not 0 and mp [ x ] [ y + 1 ] is not 0 then set flog to 1	if ( mp [ x - 1 ] [ y ] ) flog = 1 ;
	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;	NA
if mp [ x + 1 ] [ y ] is not 0 and mp [ x + 1 ] [ y - 1 ] is not 0 and mp [ x ] [ y - 1 ] is not 0 then set flog to 1	if ( mp [ x + 1 ] [ y ] ) flog = 1 ;
	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;	NA
if flog is not 0	if (! flog )
	if ( flog )	NA
print i	cout << i << endl ;
	cout << i << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print " 0 "	cout << " 0 " ;
	cout << " 0 " << endl ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
