declare cross with long longs x0 , y0 , x1 , y1 as arguments , returning long long	long long cross ( long long x0, long long y0, int x1, long int y1 )
	long long cross ( long long x0 , long long y0 , long long x1 , long long y1 )	NA
return y1 * x0 - y0 * x1 from function	return y1 * x0 - y0 * x1 ;
	return y1 * x0 - y0 * x1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create long long vectors X , Y with X initialized with 3 , Y initialized with 3	vector < long long > X ( 3, Y ( 3 ) ) ;
	vector < long long > X ( 3 ) , Y ( 3 ) ;	NA
for i = 0 to 3 exclusive , read X [ i ] read Y [ i ]	for ( int i = 0 ; i < 3 ; i ++ ) { cin >> X [ i ] >> Y [ j ] ; }
	for ( long long i = 0 ; i < 3 ; ++ i ) cin >> X [ i ] >> Y [ i ] ;	NA
create long long c with c = result of run cross with X [ 1 ] - X [ 0 ] , Y [ 1 ] - Y [ 0 ] , X [ 2 ] - X [ 1 ] , Y [ 2 ] - Y [ 1 ] as arguments	long long c = cross ( X [ 1 ] - X [ 0 ], Y [ 1 ) - Y [ 0, X [ 2 ] + X [ i ], y [ 3 ] - Y ] ) ;
	long long c = cross ( X [ 1 ] - X [ 0 ] , Y [ 1 ] - Y [ 0 ] , X [ 2 ] - X [ 1 ] , Y [ 2 ] - Y [ 1 ] ) ;	NA
if c is 0	if ( c == 0 )
	if ( c == 0 )	1
print " TOWARDS \ n "	cout << " TOWARDS\n " ;
	cout << " TOWARDS\n " ;	1
else if c is less than 0	else if ( c < 0 )
	else if ( c < 0 )	1
print " RIGHT \ n "	cout << " RIGHT\n " ;
	cout << " RIGHT\n " ;	1
else	else
	else	1
print " LEFT \ n "	cout << " LEFT\n " ;
	cout << " LEFT\n " ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
