let n be a integer	int n ;
	int n ;	1
p = array of integers of length 200100	int p [ 200100 ] ;
	int p [ 200100 ] ;	1
b = array of integers of length 200100	int b [ 200100 ] ;
	int b [ 200100 ] ;	1
vis = array of integers of length 200200	int vis [ 200200 ] ;
	int vis [ 200200 ] ;	1
let dfs be a function which accepts integer x value	void dfs ( int x )
	void dfs ( int x )	1
the xth element of array vis is equal to 1	vis [ x ] = 1 ;
	vis [ x ] = 1 ;	1
if ( not vis [ xth element of array p ] , dfs ( xth element of array p )	if (! vis [ p [ x ] ] ) dfs ( p [ i ] ) ;
	if ( ! vis [ p [ x ] ] ) dfs ( p [ x ] ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read n	cin >> n ;
	cin >> n ;	1
for ( i = 1 to n inclusive ) , read ith element of array p	for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;
	for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;	1
let cnt be a integer with cnt value as 0	int cnt = 0 ;
	int cnt = 0 ;	1
for ( i = 1 to n inclusive )	for ( int i = 1 ; i <= n ; i ++ )
	for ( int i = 1 ; i <= n ; i ++ )	1
read ith element of array b	cin >> b [ i ] ;
	cin >> b [ i ] ;	1
if ( ith element of array b is equal to 1 ) , increase cnt by 1	if ( b [ i ] =='1') cnt ++ ;
	if ( b [ i ] == 1 ) cnt ++ ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
let ans be a integer with ans value is equal to 0	int ans = 0 ;
	int ans = 0 ;	1
if ( cnt modulus 2 is equal to 0 ) , increase ans by 1	if ( cnt % 2 == 0 ) ans ++ ;
	if ( cnt % 2 == 0 ) ans ++ ;	1
let the value of cnt is equal to 0	cnt = 0 ;
	cnt = 0 ;	1
for ( i = 1 to n inclusive )	for ( int i = 1 ; i <= n ; i ++ )
	for ( int i = 1 ; i <= n ; i ++ )	1
if ( not ith element of array vis )	if (! vis [ i ] )
	if ( ! vis [ i ] )	NA
increase cnt value by 1	cnt ++ ;
	cnt ++ ;	1
dfs of i	dfs ( i ) ;
	dfs ( i ) ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if ( cnt is equal to 1 ) , cnt is equal to 0	if ( cnt == 1 ) cnt = 0 ;
	if ( cnt == 1 ) cnt = 0 ;	1
print ans + cnt and newline	cout << ans + cnt << endl ;
	cout << ans + cnt << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
