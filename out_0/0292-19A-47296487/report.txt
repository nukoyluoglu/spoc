scored , conceed , points are maps of string to int	map < string, int > scores, conceed, points ;
	map < string , int > scored , conceed , points ;	NA
vec and a are vectors of strings	vector < string > vec, a ;
	vector < string > vec , a ;	NA
boolean function cmp with string arguments a and b	bool cmp ( string a, string b )
	bool cmp ( string a , string b )	NA
if points [ b ] is greater than points [ a ]	if ( points [ b ] > points [ a ] )
	if ( points [ b ] > points [ a ] )	1
return 1	return 1 ;
	return 1 ;	1
else if points [ b ] is less than points [ a ]	else if ( points [ b ] < points [ a ] )
	else if ( points [ b ] < points [ a ] )	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
else	else
	else	1
dif1 is an integer = scored [ a ] - conceed [ a ]	int dif1 = scored ['a'] - conceed ['A'] ;
	int dif1 = scored [ a ] - conceed [ a ] ;	NA
dif2 is an integer = scored [ b ] - conceed [ b ]	vector < int > dif2 = scored [ b ] - conceed [ a ] ;
	int dif2 = scored [ b ] - conceed [ b ] ;	NA
if dif1 is less than dif2	if ( dif1 < dif2 )
	if ( dif1 < dif2 )	1
return 1	return 1 ;
	return 1 ;	1
else if dif1 is greater than dif2	else if ( dif1 > dif2 )
	else if ( dif1 > dif2 )	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
else	else
	else	1
if scored [ a ] is greater than scored [ b ]	if ( scored [ a ] > scored [ b ] )
	if ( scored [ a ] > scored [ b ] )	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
else if scored [ a ] is less than scored [ b ]	else if ( scored [ a ] < scored [ b ] )
	else if ( scored [ a ] < scored [ b ] )	1
return 1	return 1 ;
	return 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
set integer n to 0	int n = 0 ;
	int n = 0 ;	1
st = string	string st ;
	string st ;	1
read n	cin >> n ;
	cin >> n ;	1
m and k are integers with m = n and k = n / 2	int m = n, k = n / 2 ;
	int m = n , k = n / 2 ;	NA
while m - -	while ( m -- )
	while ( m -- )	1
read st	cin >> st ;
	cin >> st ;	1
push st into vec	vec. push_back ( st ) ;
	vec . push_back ( st ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
n = ( n * n - 1 ) / 2	n = ( n * n - 1 ) / 2 ;
	n = ( n * n - 1 ) / 2 ;	1
st = " "	string st = " " ;
	st = " " ;	NA
read character from the input	getchar ( ) ;
	getchar ( ) ;	1
while n - -	while ( n -- )
	while ( n -- )	1
let i be integer	int i ;
	int i ;	1
team1 and team2 are empty strings	string team1 = " ", team2 = " } ;
	string team1 = " " , team2 = " " ;	NA
read line from input into st	getline ( cin, st ) ;
	getline ( cin , st ) ;	NA
for i = 0 to length of st exclusive	for ( int i = 0 ; i < st. size ( ) ; i ++ )
	for ( i = 0 ; i < st . size ( ) ; i ++ )	NA
if st [ i ] is equal to ' - '	if ( st [ i ] =='-')
	if ( st [ i ] == ' - ' )	NA
increase i by one	i ++ ;
	i ++ ;	1
break the loop	break ;
	break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
increase team1 by st [ i ]	team1 += st [ i ] ;
	team1 += st [ i ] ;	1
}	}	}	DUMMY	DUMMY	DUMMY
loop through i while i < length of st , incrementing i	for ( int i = 0 ; i < st. size ( ) ; i ++ )
	for ( ; i < st . size ( ) ; i ++ )	NA
if st [ i ] is equal to ' '	if ( st [ i ] ==' ')
	if ( st [ i ] == ' ' )	NA
increase i	i ++ ;
	i ++ ;	1
stop the loop	break ;
	break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
increase team2 by st [ i ]	team2 += st [ i ] ;
	team2 += st [ i ] ;	1
}	}	}	DUMMY	DUMMY	DUMMY
let j and sum1 be integers with j = 1 and sum1 = 0	int j = 1, sum1 = 0 ;
	int j = 1 , sum1 = 0 ;	NA
loop through i while i < length of st , incrementing i	for ( int i = 0 ; i < st. size ( ) ; i ++ )
	for ( ; i < st . size ( ) ; i ++ )	NA
if st [ i ] is equal to ' : '	if ( st [ i ] ==':')
	if ( st [ i ] == ' : ' )	NA
increase i by one	i ++ ;
	i ++ ;	1
break the loop	break ;
	break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
create integer c with value st [ i ] - 48	int c = st [ i ] - 48 ;
	int c = st [ i ] - 48 ;	1
sum1 = ( sum1 * j ) + c	sum1 = ( sum1 * j ) + c ;
	sum1 = ( sum1 * j ) + c ;	1
multiply j by 10	j *= 10 ;
	j *= 10 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
increase scored [ team1 ] by sum1	scored [ team1 ] += sum1 ;
	scored [ team1 ] += sum1 ;	1
increase conceed [ team2 ] by sum1	conceed [ team2 ] += sum1 ;
	conceed [ team2 ] += sum1 ;	1
create integer sum2 with value 0	int sum2 = 0 ;
	int sum2 = 0 ;	1
set value of j to 1	j = 1 ;
	j = 1 ;	1
loop through i while i < length of st , incrementing i	for ( int i = 0 ; i < st. size ( ) ; i ++ )
	for ( ; i < st . size ( ) ; i ++ )	NA
create integer c with value st [ i ] - 48	int c = st [ i ] - 48 ;
	int c = st [ i ] - 48 ;	1
sum2 = ( sum2 * j ) + c	sum2 = ( sum2 * j ) + c ;
	sum2 = ( sum2 * j ) + c ;	1
multiply j by 10	j *= 10 ;
	j *= 10 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
increase scored [ team2 ] by sum2	scored [ team2 ] += sum2 ;
	scored [ team2 ] += sum2 ;	1
increase conceed [ team1 ] by sum2	conceed [ team1 ] += sum2 ;
	conceed [ team1 ] += sum2 ;	1
if sum1 is greater than sum2	if ( sum1 > sum2 )
	if ( sum1 > sum2 )	1
increase points [ team1 ] by 3	points [ team1 ] += 3 ;
	points [ team1 ] += 3 ;	1
else if sum1 is less than sum2	else if ( sum1 < sum2 )
	else if ( sum1 < sum2 )	1
increase points [ team2 ] by 3	points [ team2 ] += 3 ;
	points [ team2 ] += 3 ;	1
else	else
	else	1
increment points [ team1 ]	points [ team1 ] ++ ;
	points [ team1 ] ++ ;	1
increment points [ team2 ]	points [ team2 ] ++ ;
	points [ team2 ] ++ ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
sort vec using cmp as comparator function	sort ( vec, vec + cmp ) ;
	sort ( vec . begin ( ) , vec . end ( ) , cmp ) ;	NA
for i = length of vec - 1 to k inclusive , decrementing i , push i into vec	for ( int i = vec. size ( ) - 1 ; i >= k ; i -- ) vec. push_back ( i ) ;
	for ( int i = vec . size ( ) - 1 ; i >= k ; i -- ) a . push_back ( vec [ i ] ) ;	NA
sort a	sort ( a, a + n ) ;
	sort ( a . begin ( ) , a . end ( ) ) ;	NA
for i = 0 to length of a exclusive print a [ i ]	for ( int i = 0 ; i < a. length ( ) ; i ++ ) { cout << a [ i ] ; }
	for ( int i = 0 ; i < a . size ( ) ; i ++ ) cout << a [ i ] << endl ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
