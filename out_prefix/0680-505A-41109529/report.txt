let s1 be character array with size 15	char s1 [ 15 ] ;
	char s1 [ 15 ] ;	1
set s2 be character array with size 15	char s2 [ 15 ] ;
	char s2 [ 15 ] ;	1
set s be character array with size 15	char s [ 15 ] ;
	char s [ 15 ] ;	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
declare integer variable f = 0	int f = 0 ;
	int f = 0 ;	1
read s1	cin >> s1 ;
	cin >> s1 ;	1
declare integer variable n = length of s1	int n = s1. length ( ) ;
	int n = strlen ( s1 ) ;	NA
create boolean flag = 0	bool flag = 0 ;
	bool flag = 0 ;	1
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
	for ( int i = 0 ; i < 26 ; i ++ )	1
for j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
	for ( int j = 0 ; j <= n ; j ++ )	1
set f to 0	f = 0 ;
	f = 0 ;	1
for k = 0 to j exclusive , set s [ k ] to s1 [ k ]	for ( int k = 0 ; k < j ; k ++ ) { s [ k ] = s1 [ ++ k ] ; }
	for ( int k = 0 ; k < j ; k ++ ) { s [ k ] = s1 [ k ] ; }	NA
s [ j ] = char ( ' a ' + i )	s [ j ] = char ('a'+ i ) ;
	s [ j ] = char ( ' a ' + i ) ;	NA
for k = j + 1 to n inclusive , set s [ k ] to s1 [ k - 1 ]	for ( int k = j + 1 ; k <= n ; k ++ ) s [ k ] = s1 [ k - 1 ] ;
	for ( int k = j + 1 ; k <= n ; k ++ ) { s [ k ] = s1 [ k - 1 ] ; }	NA
for i = 0 , j = n while i < j increase i and decrease j	for ( int i = 0, j = n ; i < j ; i ++, j -- )
	for ( int i = 0 , j = n ; i < j ; i ++ , j -- )	NA
if s [ i ] ! = s [ j ]	if ( s [ i ]!= s [ j ] )
	if ( s [ i ] != s [ j ] )	NA
increment f	f ++ ;
	f ++ ;	1
if f > = 1 , break	if ( f >= 1 ) break ;
	if ( f >= 1 ) { break ; }	NA
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if f = 0	if (! f )
	if ( f == 0 )	NA
print n elements of s	for ( int i = 0 ; i < n ; i ++ ) { cout << s [ i ] << endl ; }
	for ( int i = 0 ; i <= n ; i ++ ) { cout << s [ i ] ; }	NA
print new line	cout << endl ;
	cout << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print " NA "	cout << " NA "
	cout << " NA " << endl ;	NA
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
