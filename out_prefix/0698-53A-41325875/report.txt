function subset ( get strings n1 and n2 and int len , return bool )	bool subset ( string n1, string n2, int len )
	bool subset ( string n1 , string n2 , int len )	NA
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
	for ( int i = 0 ; i < len ; i ++ )	1
if n1 [ i ] ! = n2 [ i ] return false	if ( n1 [ i ]!= n2 [ len ] ) { return false ; }
	if ( n1 [ i ] != n2 [ i ] ) return false ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
return true	return true ;
	return true ;	1
}	}	}	DUMMY	DUMMY	DUMMY
function small_min ( get strings n1 and n2 , return string )	string small_min ( string n1, string n2 )
	string small_min ( string n1 , string n2 )	NA
if length of n1 < length of n2 return n1	if ( n1. size ( ) < n2. length ( ) ) return n1 ;
	if ( n1 . length ( ) < n2 . length ( ) ) return n1 ;	NA
return n2	return n2 ;
	return n2 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
s , ans = string	string s, ans ;
	string s , ans ;	NA
read s	cin >> s ;
	cin >> s ;	1
ara = array of 110 string	string ara [ 110 ] ;
	string ara [ 110 ] ;	1
n = int	int n ;
	int n ;	1
read n	cin >> n ;
	cin >> n ;	1
f = 0	int f = 0 ;
	int f = 0 ;	1
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
	for ( int i = 0 ; i < n ; i ++ )	1
read ara [ i ]	cin >> ara [ i ] ;
	cin >> ara [ i ] ;	1
j = int	int j ;
	int j ;	1
for j = 0 to size of s exclusive	for ( j = 0 ; j < s. size ( ) ; j ++ )
	for ( j = 0 ; j < s . size ( ) ; j ++ )	NA
if ara [ i ] [ j ] ! = s [ j ] break	if ( ara [ i ] [ j ]!= s [ j - 1 ] ) break ;
	if ( ara [ i ] [ j ] != s [ j ] ) break ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
if j is size of s	if ( j == s. size ( ) )
	if ( j == s . size ( ) )	NA
if f is 0 ans = ara [ i ]	if ( f == 0 ) ans = ara [ i ] ;
	if ( f == 0 ) ans = ara [ i ] ;	1
f = 1	f = 1 ;
	f = 1 ;	1
ans = min ( ans , ara [ i ] )	ans = min ( ans, ara [ i ] ) ;
	ans = min ( ans , ara [ i ] ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if f is 0	if ( f == 0 )
	if ( f == 0 )	1
print s	cout << s << endl ;
	cout << s << endl ;	1
else	else
	else	1
print ans	cout << ans << endl ;
	cout << ans << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
