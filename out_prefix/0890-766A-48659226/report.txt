declare constant long long N = 1e8 + 3	const long long N = 1e8 + 3 ;
	const long long N = 1e8 + 3 ;	1
declare constant long long MN = 1e9 + 7	const long long MN = 1e9 + 7 ;
	const long long MN = 1e9 + 7 ;	1
declare constant long long MX = - 1e9 - 7	const long long MX = - 1e9 - 7 ;
	const long long MX = - 1e9 - 7 ;	1
declare long longs n , m , cnt , mx = MX	long long n, m, cnt, mx = MX ;
	long long n , m , cnt , mx = MX ;	NA
declare a , b as strings	string a, b ;
	string a , b ;	NA
declare pair of long long , long long pr	pair < long long, long long > pr ;
	pair < long long , long long > pr ;	NA
declare string vector v	vector < string > v ;
	vector < string > v ;	1
declare map from string to long long mp	map < string, long long > mp ;
	map < string , long long > mp ;	NA
declare long long set st	set < long long > st ;
	set < long long > st ;	1
declare long long set iterator it	set < long long > :: iterator it ;
	set < long long > :: iterator it ;	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read a , b	cin >> a >> b ;
	cin >> a >> b ;	1
if maximum of ( size of a and size of b ) is greater than minimum of ( size of a and size of b )	if ( max ( a. size ( ), b. size( ) ) > min ( b.size ( ) ) )
	if ( max ( a . size ( ) , b . size ( ) ) > min ( a . size ( ) , b . size ( ) ) )	NA
print maximum of ( size of a and size of b )	cout << max ( a. size ( ), ( long long ) b.size ( ) ) << endl ;
	cout << max ( a . size ( ) , b . size ( ) ) ;	NA
else	else
	else	1
while true	while ( true )
	while ( true )	1
if a is not b	if ( a!= b )
	if ( a != b )	NA
print size of a	cout << a. size ( ) << endl ;
	cout << a . size ( ) ;	NA
end loop	break ;
	break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
let a be substring of a from 0 to size of a - 1	a = a. substr ( 0, a. size ( ) - 1 ) ;
	a = a . substr ( 0 , a . size ( ) - 1 ) ;	NA
let b be substring of b from 0 to size of b - 1	b = b. substr ( 0, b. size ( ) - 1 ) ;
	b = b . substr ( 0 , b . size ( ) - 1 ) ;	NA
if size of a is 0	if ( a. size ( ) == 0 )
	if ( a . size ( ) == 0 )	NA
print - 1	cout << - 1 << endl ;
	cout << - 1 ;	NA
end loop	break ;
	break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print " \ n "	cout << " \n " ;
	cout << " \n " ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
