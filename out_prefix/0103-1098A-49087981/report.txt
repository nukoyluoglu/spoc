int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create integer n	int n ;
	int n ;	1
read n	cin >> n ;
	cin >> n ;	1
create long long integer arrays s , ms , p , v with s size n , ms size n , p size n , v size n	long long int s [ n ], ms [ n -- ], p [ n - 1 ], v [ n + 1 ] ;
	long long int s [ n ] , ms [ n ] , p [ n ] , v [ n ] ;	NA
set p [ 0 ] to 0	p [ 0 ] = 0 ;
	p [ 0 ] = 0 ;	1
for i = 1 to n exclusive , decrementing p [ increment i ] , read p [ i ]	for ( int i = 1 ; i < n ; i ++ ) { cin >> p [ i ] ; }
	for ( int i = 1 ; i < n ; -- p [ i ++ ] ) cin >> p [ i ] ;	NA
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
	for ( int i = 0 ; i < n ; ++ i )	NA
read s [ i ]	cin >> s [ i ] ;
	cin >> s [ i ] ;	1
set ms [ i ] to s [ i ]	ms [ i ] = s [ 1 ] ;
	ms [ i ] = s [ i ] ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
for i = n - 1 to 0 exclusive , decrementing i	for ( int i = n - 1 ; i > 0 ; i -- )
	for ( int i = n - 1 ; i > 0 ; -- i )	NA
if ms [ i ] is less than 0 , break current loop iteration	if ( ms [ i ] < 0 ) continue ;
	if ( ms [ i ] < 0 ) continue ;	1
if s [ p [ i ] ] is less than 0 and ( ms [ p [ i ] ] is less than 0 or ms [ p [ i ] ] is greater than ms [ i ] ) , set ms [ p [ i ] ] to ms [ i ]	if ( ( s [ p [ i ] ] < 0 && ( ms [ s [ 1 ] ] > 0 || ms [ p ] i ] > ms [ i + 1 ] ) ) ms [ 0 ] = ms [ 2 ] ;
	if ( s [ p [ i ] ] < 0 && ( ms [ p [ i ] ] < 0 || ms [ p [ i ] ] > ms [ i ] ) ) ms [ p [ i ] ] = ms [ i ] ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
if ms [ 0 ] is less than 0 , set ms [ 0 ] to 0	if ( ms [ 0 ] < 0 ) ms [ 1 ] = 0 ;
	if ( ms [ 0 ] < 0 ) ms [ 0 ] = 0 ;	NA
create long long integer sum with sum = ms [ 0 ]	long long int sum = ms [ 0 ] ;
	long long int sum = ms [ 0 ] ;	1
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
	for ( int i = 1 ; i < n ; ++ i )	NA
if ms [ i ] is less than 0	if ( ms [ i ] < 0 )
	if ( ms [ i ] < 0 )	1
set ms [ i ] to mms [ p [ i ] ]	ms [ i ] = mms [ p [ 1 ] ] ;
	ms [ i ] = ms [ p [ i ] ] ;	NA
else if ms [ i ] is less than ms [ p [ i ] ]	else if ( ms [ i ] < ms [ p [ 1 ] ] )
	else if ( ms [ i ] < ms [ p [ i ] ] )	NA
print - 1 print newline	cout << - 1 << endl ;
	cout << - 1 << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
else	else
	else	1
increment sum by ms [ i ] - ms [ p [ i ] ]	sum += ms [ i ] - ms [ p [ 1 ] ] ;
	sum += ms [ i ] - ms [ p [ i ] ] ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
print sum print newline	cout << sum << endl ;
	cout << sum << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
