declare long longs n , c1 , c2	long long n, c1, c2 ;
	long long n , c1 , c2 ;	NA
declare solve with long long g as argument , returning long long	long long solve ( long long g )
	long long solve ( long long g )	1
declare long longs t1 = round up ( double casted ( n ) / g ) , t2 = n / g , left = n , res = 0	long long t1 = ceil ( double ( n ) / g ), t2 = n / g, left = n, res = 0 ;
	long long t1 = ceil ( ( double ) n / g ) , t2 = n / g , left = n , res = 0 ;	NA
for t2 * g is not left and left is greater than 0 , decrementing left by t1 , decrementing g , increment res by ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) )	for ( ; t2 * g!= left && left > 0 ; left -= t1, g -- ) { res += ( c1 + c2 * ( t1 - 1 ) * (t1 - 2 ) ) ; }
	for ( ; t2 * g != left && left > 0 ; left -= t1 , g -- ) res += ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) ) ;	NA
for g is greater than 0 , decrementing left by t2 , decrementing g , increment res by ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) )	for ( g > 0 ; left > 0 && left > t2 ; g -- ) { res += ( c1 + c2 * ( t2 - 1 ) * (t2 - 2 ) ) ; }
	for ( ; g > 0 ; left -= t2 , g -- ) res += ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) ) ;	NA
return res from function	return res ;
	return res ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
declare t as character	char t ;
	char t ;	1
read n , c1 , c2	cin >> n >> c1 >> c2 ;
	cin >> n >> c1 >> c2 ;	1
declare long longs p = 0 , r = 0 , i	long long p == 0, r = 0, i ;
	long long p = 0 , r = 0 , i ;	NA
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
	for ( i = 0 ; i < n ; i ++ )	1
read t	cin >> t ;
	cin >> t ;	1
increment p if t is ' 1 ' , else increment r	p = t =='1 '? p ++ : r ++ ;
	( t == ' 1 ' ) ? p ++ : r ++ ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
declare long long lo = 1 , hi = p	long long lo = 1, hi = p ;
	long long lo = 1 , hi = p ;	NA
while lo is less than hi	while ( lo < hi )
	while ( lo < hi )	1
declare long long diff = hi - lo	long long diff = hi - lo ;
	long long diff = hi - lo ;	1
declare long longs p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3	long long p1 = lo + diff / 3, p2 = ( lo + ( 2 * diff + 2 ) / 3 ) ;
	long long p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3 ;	NA
declare long longs s1 = result of run solve with p1 as argument , s2 = result of run solve ( p2 )	long long s1 = solve ( p1 ), s2 = solve( p2 ) ;
	long long s1 = solve ( p1 ) , s2 = solve ( p2 ) ;	NA
if s1 is s2	if ( s1 == s2 )
	if ( s1 == s2 )	1
let lo be p1 + 1 , hi be p2 - 1	lo = p1 + 1, hi = p2 - 1 ;
	lo = p1 + 1 , hi = p2 - 1 ;	NA
else if s1 is greater than s2	else if ( s1 > s2 )
	else if ( s1 > s2 )	1
let lo be p1 + 1	lo = p1 + 1 ;
	lo = p1 + 1 ;	1
else	else
	else	1
let hi be p2 - 1	hi = p2 - 1 ;
	hi = p2 - 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
print result of run solve with lo as argument , newline	cout << solve ( lo ) << endl ;
	cout << solve ( lo ) << endl ;	1
}	}	}	DUMMY	DUMMY	DUMMY
