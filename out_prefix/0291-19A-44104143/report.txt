point , num_diff and num are maps from string to int	map < string, int > point, num_diff, num ;
	map < string , int > point , num_diff , num ;	NA
declare string variable s	string s ;
	string s ;	1
name is an array of strings with size 56	string name [ 56 ] ;
	string name [ 56 ] ;	1
boolean function cmp with string arguments s1 and s2	bool cmp ( string s1, string s2 )
	bool cmp ( string s1 , string s2 )	NA
if point [ s1 ] ! = point [ s2 ] return point [ s1 ] > point [ s2 ]	if ( points [ s1 ]!= point [ s2 ] ) { return point [ 1 ] > point [ 2 ] ; }
	if ( point [ s1 ] != point [ s2 ] ) return point [ s1 ] > point [ s2 ] ;	NA
if num_diff [ s1 ] ! = num_diff [ s2 ] return num_diff [ s1 ] > num_diff [ s2 ]	if ( num_diff [ s1 ]!= num_ diff [ s2 ] ) { return ( numicdiff [ S1 ] > num_bumb [ s3 ] ) ; }
	if ( num_diff [ s1 ] != num_diff [ s2 ] ) return num_diff [ s1 ] > num_diff [ s2 ] ;	NA
return num [ s1 ] > num [ s2 ]	return num [ s1 ] > num [ S2 ] ;
	return num [ s1 ] > num [ s2 ] ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
let s1 and s2 be strings	string s1, s2 ;
	string s1 , s2 ;	NA
declare integer variable n	int n ;
	int n ;	1
num1 and num2 are integers	int num1, num2 ;
	int num1 , num2 ;	NA
c = character	char c ;
	char c ;	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read n	cin >> n ;
	cin >> n ;	1
for i = 1 to n inclusive read name [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> name [ i ] ;
	for ( int i = 1 ; i <= n ; i ++ ) { cin >> name [ i ] ; }	NA
for integer i = 1 to ( n * ( n - 1 ) ) > > 1 inclusive	for ( int i = 1 ; ( n * ( n - 1 ) ) >> 1 ; i ++ )
	for ( int i = 1 ; i <= ( n * ( n - 1 ) ) >> 1 ; i ++ )	NA
read s , num1 , c and num2	cin >> s >> num1 >> c >> num2 ;
	cin >> s >> num1 >> c >> num2 ;	1
s1 = substring of s from the start to the first character ' - '	s1 = s. substr ( 1,'-') ;
	s1 = s . substr ( 0 , s . find ( " - " ) ) ;	NA
s2 = substring of s from the first character ' - ' to the end	s2 = s. substr ( 1,'-') ;
	s2 = s . substr ( s . find ( " - " ) + 1 ) ;	NA
if num1 is greater than num2 , add 3 to point [ s1 ]	if ( num1 > num2 ) point [ s1 ] += 3 ;
	if ( num1 > num2 ) { point [ s1 ] += 3 ; }	NA
if num1 is less than num2 , add 3 to point [ s2 ]	if ( num1 < num2 ) point [ s2 ] += 3 ;
	if ( num1 < num2 ) { point [ s2 ] += 3 ; }	NA
if num1 = num2	if ( num1 == num2 )
	if ( num1 == num2 )	1
increase point [ s1 ]	point [ s1 ] ++ ;
	point [ s1 ] ++ ;	1
increase point [ s2 ]	point [ s2 ] ++ ;
	point [ s2 ] ++ ;	1
}	}	}	DUMMY	DUMMY	DUMMY
increase num [ s1 ] by num1	num [ s1 ] += num1 ;
	num [ s1 ] += num1 ;	1
increase num [ s2 ] by num2	num [ s2 ] += num2 ;
	num [ s2 ] += num2 ;	1
increase num_diff [ s1 ] by num1 - num2	num_diff [ s1 ] += num1 - num2 ;
	num_diff [ s1 ] += num1 - num2 ;	1
increase num_diff [ s2 ] by num2 - num1	num_diff [ s2 ] += num2 - num1 ;
	num_diff [ s2 ] += num2 - num1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
sort name from name + 1 to name + n + 1 using comparator cmp	sort ( name + 1, name + ( n + 1 ), cmp ) ;
	sort ( name + 1 , name + n + 1 , cmp ) ;	NA
sort name from name + 1 to name + ( n / 2 + 1 ) using comparator cmp	sort ( name + 1, name + ( n / 2 + 1 ), cmp ) ;
	sort ( name + 1 , name + ( n / 2 + 1 ) ) ;	NA
for integer i = 1 to ( n > > 1 ) inclusive print name [ i ] and a new line	for ( int i = 1 ; i <= ( n >> 1 ) ; i ++ ) cout << name [ i ] << endl ;
	for ( int i = 1 ; i <= ( n >> 1 ) ; i ++ ) { cout << name [ i ] << endl ; }	NA
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
