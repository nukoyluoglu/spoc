Mod = const int with Mod = 1e9 + 7	const int Mod = 1e9 + 7 ;
	const int Mod = 1e9 + 7 ;	1
n , p = integers	int n, p ;
	int n , p ;	NA
choose , ans = long long with choose = 2d array of 30025 rows and 600 columns , ans = 1	long long choose [ 30025 ] [ 600 ], ans = 1 ;
	long long choose [ 30000 + 25 ] [ 600 ] , ans = 1 ;	NA
Pedy = map from int to int	map < int, int > Pedy ;
	map < int , int > Pedy ;	NA
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read n	cin >> n ;
	cin >> n ;	1
index 0 , 0 of choose = 1	for ( int i = 0 ; i < n ; i ++ ) { choose [ i ] = 1 ; }
	choose [ 0 ] [ 0 ] = 1 ;	NA
for i = 1 to 30024	for ( int i = 1 ; i <= 30024 ; i ++ )
	for ( int i = 1 ; i < 30000 + 25 ; i ++ )	NA
index i and 0 of choose = 1	for ( int i = 1, 0 ; i < n ; i ++ ) { choose [ i ] [ 0 ] = 1 ; }
	choose [ i ] [ 0 ] = 1 ;	NA
for j = 1 to n index i and j of choose = ( choose [ i - 1 ] [ j - 1 ] + choose [ i - 1 ] [ j ] ) modulo Mod	for ( int j = 1 ; j < n ; j ++ ) { choose [ i ] [ j - 1 ] + choose [ j ] % Mod = mod ; }
	for ( int j = 1 ; j <= n ; j ++ ) choose [ i ] [ j ] = ( choose [ i - 1 ] [ j - 1 ] + choose [ i - 1 ] [ j ] ) % Mod ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
	for ( int i = 0 ; i < n ; i ++ )	1
read p	cin >> p ;
	cin >> p ;	1
for j = 2 to j * j < = p	for ( int j = 2 ; j * j <= p ; j ++ )
	for ( int j = 2 ; j * j <= p ; j ++ )	1
if p modulo j is 0	if ( p % j == 0 )
	if ( p % j == 0 )	1
while not ( p modulo j )	while (! ( p % j ) )
	while ( not ( p % j ) )	NA
p = p / j	p /= j ;
	p /= j ;	1
increment Pedy [ j ]	Pedy [ j ] ++ ;
	Pedy [ j ] ++ ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if p > 1 , increment Pedy [ p ]	if ( p > 1 ) Pedy [ p ] ++ ;
	if ( p > 1 ) Pedy [ p ] ++ ;	1
}	}	}	DUMMY	DUMMY	DUMMY
for it = Pedy . begin ( ) to it is not Pedy . end ( )	for ( map < long long, long long > :: iterator it = Pedy. begin ( ) ; it!= ( long long ) Pedy [ i ] ; ++ it )
	for ( map < int , int > :: iterator it = Pedy . begin ( ) ; it != Pedy . end ( ) ; it ++ )	NA
p = second in it	p = it. second ;
	p = it -> second ;	NA
ans = ( ans * choose [ p + n - 1 ] [ n - 1 ] ) modulo Mod	ans = ( ans * choose [ p + n - 1 ] [ n - i ] ) % Mod ;
	ans = ( ans * choose [ p + n - 1 ] [ n - 1 ] ) % Mod ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
print ans	cout << ans << endl ;
	cout << ans << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
