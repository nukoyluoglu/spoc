let a be an array of integers of length 10005	int a [ 10005 ] ;
	int a [ 10005 ] ;	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create integers n and t	int n, t ;
	int n , t ;	NA
read n and t	cin >> n >> t ;
	cin >> n >> t ;	1
multiply t by 2	t *= 2 ;
	t *= 2 ;	1
mi and mx are integers with mi = 5000 and mx = 0	int mi = 5000, mx = 0 ;
	int mi = 5000 , mx = 0 ;	NA
invoke function memset with arguments a , 0 and size of a	memset ( a, 0, sizeof ( a ) ) ;
	memset ( a , 0 , sizeof ( a ) ) ;	NA
while n - -	while ( n -- )
	while ( n -- )	1
let x and aa be integers	int x, aa ;
	int x , aa ;	NA
read x and aa	cin >> x >> aa ;
	cin >> x >> aa ;	1
set integer ll to x * 2 + 4000 - aa ;	int ll = x * 2 + 4000 - aa ;
	int ll = x * 2 + 4000 - aa ;	1
set integer rr to x * 2 + 4000 + aa	int rr = x * 2 + 4000 + aa ;
	int rr = x * 2 + 4000 + aa ;	1
for i = ll to rr inclusive	for ( int i = ll ; i <= rr ; i ++ )
	for ( int i = ll ; i <= rr ; ++ i )	NA
increase a [ i ]	a [ i ] ++ ;
	a [ i ] ++ ;	1
set mx to max of mx , i	mx = max ( mx, i ) ;
	mx = max ( mx , i ) ;	NA
set value of mi to min of mi , i	mi = min ( mi, i ) ;
	mi = min ( mi , i ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
len and ans are integers with len = 0 and ans = 2	int len = 0, ans = 2 ;
	int len = 0 , ans = 2 ;	NA
for integer i = mi to mx inclusive	for ( int i = mi ; i <= mx ; ++ i )
	for ( int i = mi ; i <= mx ; ++ i )	1
increase len	len ++ ;
	len ++ ;	1
if a [ i ] is true	if ( a [ i ] )
	if ( a [ i ] )	1
if len is greater than t	if ( len > t )
	if ( len > t )	1
increase ans by 2	ans += 2 ;
	ans += 2 ;	1
else if len is equal to t	else if ( len == t )
	else if ( len == t )	1
increase ans by one	ans ++ ;
	ans ++ ;	1
len = 0	len = 0 ;
	len = 0 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if len is greater than t	if ( len > t )
	if ( len > t )	1
increase ans by 2	ans += 2 ;
	ans += 2 ;	1
else if len is equal to t	else if ( len == t )
	else if ( len == t )	1
increment ans	ans ++ ;
	ans ++ ;	1
print ans and a new line	cout << ans << endl ;
	cout << ans << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
