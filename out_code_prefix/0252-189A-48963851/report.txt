declare cut_ribbon with integers n , a , b , c as arguments	void cut_ribbon ( int n, int a, int b, int c )
	int cut_ribbon ( int n , int a , int b , int c )	NA
create integer array arr with size n + 1	int arr [ n + 1 ] ;
	int arr [ n + 1 ] ;	1
set bytes from arr to size of arr to value 0	memset ( arr, 0, sizeof ( arr ) ) ;
	memset ( arr , 0 , sizeof ( arr ) ) ;	NA
if a is less than or equal to n , set arr [ a ] to 1	if ( a <= n ) { arr [ a ] = 1 ; }
	if ( a <= n ) { arr [ a ] = 1 ; }	1
if b is less than or equal to n , set arr [ b ] to 1	if ( b <= n ) { arr [ b ] = 1 ; }
	if ( b <= n ) { arr [ b ] = 1 ; }	1
if c is less than or equal to n , set arr [ c ] to 1	if ( c <= n ) { arr [ c ] = 1 ; }
	if ( c <= n ) { arr [ c ] = 1 ; }	1
for i = 0 to n inclusive	for ( int i = 0 ; i <= n ; i ++ )
	for ( int i = 0 ; i <= n ; i ++ )	1
if i is greater than a and arr [ i - a ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - a ] + 1	if ( i > a && arr [ i - a ]!= 0 ) { arr [ j ] = max ( arr [ 1 ], arr [ 0 -'a'] + 1 ) ; }
	if ( i > a && arr [ i - a ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - a ] + 1 ) ; }	NA
if i is greater than b and arr [ i - b ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - b ] + 1	if ( i > b && arr [ i - b ]!= 0 ) { arr [ j ] = max ( arr [ 1 ], arr [ 0 - b - ] + 1 ) ; }
	if ( i > b && arr [ i - b ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - b ] + 1 ) ; }	NA
if i is greater than c and arr [ i - c ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - c ] + 1	if ( i > c && arr [ i - c ]!= 0 ) { arr [ { }
	if ( i > c && arr [ i - c ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - c ] + 1 ) ; }	NA
}	}	}	DUMMY	DUMMY	DUMMY
return arr [ n ] from function	return arr [ n ] ;
	return arr [ n ] ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create integers n , a , b , c	int n, a, b, c ;
	int n , a , b , c ;	NA
read n read a read b read c	cin >> n >> a >> b >> c ;
	cin >> n >> a >> b >> c ;	1
print result of run cut_ribbon with n , a , b , c as arguments , print newline	cout << cut_ribbon ( n, a, b, c ) << endl ;
	cout << cut_ribbon ( n , a , b , c ) << endl ;	NA
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
