let N be a constant integer with value N is equal to 100001	const int N = 100001 ;
	const int N = 100001 ;	1
g = array of vector integers of size N	vector < int > g [ N ] ;
	vector < int > g [ N ] ;	1
let n , val be integers with val = array of integers of length N	int n, val [ N ] ;
	int n , val [ N ] ;	NA
sum = array of long integers of length N	long long sum [ N ] ;
	long long sum [ N ] ;	1
let depth first search of int u and int p be a boolean type	bool depth ( int u, int p )
	bool dfs ( int u , int p )	NA
if length of g [ u ] is equal to 1 and p is not equal to - 1	if ( g [ u ]. size ( ) == 1 && p!= - 1 )
	if ( g [ u ] . size ( ) == 1 && p != - 1 )	NA
if sum [ u ] is equal to - 1	if ( sum [ u ] == - 1 )
	if ( sum [ u ] == - 1 )	1
set val [ u ] to 0	val [ u ] = 0 ;
	val [ u ] = 0 ;	1
assign the value sum [ p ] to sum [ u ]	sum [ u ] = sum [ p ] ;
	sum [ u ] = sum [ p ] ;	1
else do the following	else
	else	1
assign the value of sum [ u ] - sum [ p ] to val [ u ]	valfr = sum [ u ] - sum [ p ] ;
	val [ u ] = sum [ u ] - sum [ p ] ;	NA
return the value as true	return true ;
	return true ;	1
}	}	}	DUMMY	DUMMY	DUMMY
if sum [ u ] is equal to - 1	if ( sum [ u ] == - 1 )
	if ( sum [ u ] == - 1 )	1
let mn be a long integer with mn = 1e9	long long mn = 1e9 ;
	long long mn = 1e9 ;	1
for i = 0 to length of g [ u ] exclusive	for ( int i = 0 ; i < g [ u ]. size ( ) ; i ++ )
	for ( int i = 0 ; i < g [ u ] . size ( ) ; ++ i )	NA
let v be a integer with v = g [ u ] [ i ]	int v = g [ u ] [ i ] ;
	int v = g [ u ] [ i ] ;	1
if v is equal to p , proceed to next	if ( v == p ) continue ;
	if ( v == p ) continue ;	1
let diff be a long integer with diff = sum [ v ] - sum [ p ]	long long diff = sum [ v ] - sum [ p ] ;
	long long diff = sum [ v ] - sum [ p ] ;	1
if diff is less than 0 , return false	if ( diff < 0 ) return false ;
	if ( diff < 0 ) return false ;	1
mn = minimum of mn and diff	mn = min ( mn, diff ) ;
	mn = min ( mn , diff ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
the uth element of val = mn	val [ uth ] = mn ;
	val [ u ] = mn ;	NA
sum [ u ] is equal to sum [ p ] + val [ u ]	sum [ u ] = sum [ p ] + val [ u - 1 ] ;
	sum [ u ] = sum [ p ] + val [ u ] ;	NA
else if ( p is not equal to - 1 )	else if ( p!= - 1 )
	else if ( p != - 1 )	NA
the value of sum [ u ] - sum [ p ] is assigned to val [ u ]	valf = sum [ u ] - sum [ p ] ;
	val [ u ] = sum [ u ] - sum [ p ] ;	NA
let check is a boolean type with check = 1	bool check = 1 ;
	bool check = 1 ;	1
for i = 0 to length of g [ u ] exclusive ]	for ( int i = 0 ; i < g [ u ]. size ( ) ; i ++ )
	for ( int i = 0 ; i < g [ u ] . size ( ) ; ++ i )	NA
let v be a integer with v = g [ u ] [ i ]	int v = g [ u ] [ i ] ;
	int v = g [ u ] [ i ] ;	1
if v is equal to p , proceed to next	if ( v == p ) continue ;
	if ( v == p ) continue ;	1
check = check and depth first search of v , u	check = check, dfs ( v, u ) ;
	check = check && dfs ( v , u ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
return the value of check	return check ;
	return check ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read n	cin >> n ;
	cin >> n ;	1
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
	for ( int i = 0 ; i < n - 1 ; ++ i )	NA
let p be a integer	int p ;
	int p ;	1
read p	cin >> p ;
	cin >> p ;	1
decrease p value by 1	p -- ;
	-- p ;	NA
do g [ p ] . push_back ( i + 1 )	g [ p ]. push_back ( i + 1 ) ;
	g [ p ] . push_back ( i + 1 ) ;	NA
do g [ i + 1 ] . push_back ( p )	g [ i + 1 ]. push_back ( p ) ;
	g [ i + 1 ] . push_back ( p ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to n exclusive , read sum [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> sum [ i ] ; }
	for ( int i = 0 ; i < n ; ++ i ) cin >> sum [ i ] ;	NA
let val [ 0 ] = sum [ 0 ]	val [ 0 ] = sum [ 0 - 1 ] ;
	val [ 0 ] = sum [ 0 ] ;	NA
if not dfs of 0 and - 1	if (! dfs ( 0, - 1 ) )
	if ( ! dfs ( 0 , - 1 ) )	NA
print - 1 and newline	cout << - 1 << endl ;
	cout << - 1 << endl ;	1
else do the following	else
	else	1
let long integer s = 0	long long int s = 0 ;
	long long s = 0 ;	NA
for i = 0 to n exclusive , increase s by val [ i ]	for ( int i = 0 ; i < n ; i ++ ) { s += val [ i ] ; }
	for ( int i = 0 ; i < n ; ++ i ) s += val [ i ] ;	NA
print s and newline	cout << s << endl ;
	cout << s << endl ;	1
}	}	}	DUMMY	DUMMY	DUMMY
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
