declare constant double PI with PI = acosign of - 1 . 0	const double PI = acos ( - 1.0 ) ;
	const double PI = acos ( - 1.0 ) ;	1
declare fast_in_out with no arguments , returning void	void fast_in_out ( ) { }
	void fast_in_out ( ) { }	1
declare pause with no arguments , returning void	void pause ( ) { }
	void pause ( ) { }	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
run fast_in_out	fast_in_out ( ) ;
	fast_in_out ( ) ;	1
declare ar as integer array = { 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 }	int ar [ ] = { 2, 4, 8, 16, 32, 64, 128, 256, 512 } ;
	int ar [ ] = { 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 } ;	NA
declare integers n , b , q	int n, b, q ;
	int n , b , q ;	NA
read n and b and q	cin >> n >> b >> q ;
	cin >> n >> b >> q ;	1
declare integers x = 0 , y = n * q	int x = 0, y = n * q ;
	int x = 0 , y = n * q ;	NA
for i = 8 to 0 inclusive , decrementing i	for ( int i = 8 ; i >= 0 ; i -- )
	for ( int i = 8 ; i >= 0 ; i -- )	1
if n is less than ar [ i ] , break current loop iteration	if ( n < ar [ i ] ) continue ;
	if ( n < ar [ i ] ) continue ;	1
declare integer k with k = ar [ i ]	int k = ar [ i ] ;
	int k = ar [ i ] ;	1
let n be n - k	n = n - k ;
	n = n - k ;	1
increment n by k / 2	n += k / 2 ;
	n += k / 2 ;	1
increment i	i ++ ;
	i ++ ;	1
let k = k * b + ( k / 2 )	k *= b + ( k / 2 ) ;
	k = k * b + ( k / 2 ) ;	NA
increment x by k	x += k ;
	x += k ;	1
}	}	}	DUMMY	DUMMY	DUMMY
print x , " " , y , ' \ n '	cout << x << " " << y <<'\n';
	cout << x << " " << y << ' \n ' ;	NA
run pause	pause ( ) ;
	pause ( ) ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
