create constant integer N = 100 + 5	const int N = 100 + 5 ;
	const int N = 100 + 5 ;	1
create constant integer mod = 1000000000 + 7	const int mod = 1000000000 + 7 ;
	const int mod = 1000000000 + 7 ;	1
bool function ok with char argument a	bool ok ( char a )
	bool ok ( char a )	1
if a is a letter character return 1	if ( a >='A'&& a <='Z') return 1 ;
	if ( a >= ' a ' && a <= ' z ' ) return 1 ;	NA
if a is a capital letter character return 1	if ( a >='A'&& a <='Z') return 1 ;
	if ( a >= ' A ' && a <= ' Z ' ) return 1 ;	NA
if a is a digit return 1	if ( a >='0'&& a <='9') return 1 ;
	if ( a >= ' 0 ' && a <= ' 9 ' ) return 1 ;	NA
if a is ' _ ' return 1	if ( a =='_') return 1 ;
	if ( a == ' _ ' ) return 1 ;	NA
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
declare array of characters of size N	char a [ N ] ;
	char a [ N ] ;	1
read a + 1	cin >> a + 1 ;
	cin >> a + 1 ;	1
create integer len with value = length of ( a + 1 )	int len = strlen ( a + 1 ) ;
	int len = strlen ( a + 1 ) ;	1
set integer op to 1	int op = 1 ;
	int op = 1 ;	1
set boolean flag to 1	bool flag = 1 ;
	bool flag = 1 ;	1
integers cnt1 = 0 , cnt2 = 0 , ccnt = 0 and cnt3 = 0	long long cnt1 = 0, cnt2 = 0, ccnt = 0 and cnt3 = 0 ;
	int cnt1 = 0 , cnt2 = 0 , ccnt = 0 , cnt3 = 0 ;	NA
for integer i = 1 to len and flag inclusive	for ( int i = 1 ; i <= len && flag ; i ++ )
	for ( int i = 1 ; i <= len && flag ; i ++ )	1
if op is equal to 1	if ( op == 1 )
	if ( op == 1 )	1
increase cnt1	cnt1 ++ ;
	cnt1 ++ ;	1
if a [ i ] is ' @ '	if ( a [ i ] =='@')
	if ( a [ i ] == ' @ ' )	NA
decrement cnt1	cnt1 -- ;
	cnt1 -- ;	1
set value of op to 2	op = 2 ;
	op = 2 ;	1
go to the start of the loop	continue ;
	continue ;	1
}	}	}	DUMMY	DUMMY	DUMMY
if ok ( a [ i ] ) is false , set flag to 0	if (! ok ( a [ i ] ) ) flag = 0 ;
	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }	NA
if cnt1 is greater than 16 , set flag to 0	if ( cnt1 > 16 ) flag = 0 ;
	if ( cnt1 > 16 ) flag = 0 ;	1
else if op is equal to 2	else if ( op == 2 )
	else if ( op == 2 )	1
increment ccnt	ccnt ++ ;
	ccnt ++ ;	1
if cnt1 = 0 or cnt1 > 16 , set flag to 0	if ( cnt1 == 0 || cntl1 > 16 ) flag = 0 ;
	if ( cnt1 == 0 || cnt1 > 16 ) flag = 0 ;	NA
if a [ i ] is ' . '	if ( a [ i ] == '.')
	if ( a [ i ] == ' . ' )	NA
if cnt2 = 0 or cnt2 > 16 , set flag to 0	if ( cnt1 == 0 || cnt2 > 16 ) flag = 0 ;
	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;	NA
set cnt2 to 0	cnt2 = 0 ;
	cnt2 = 0 ;	1
go to the start of the loop	continue ;
	continue ;	1
}	}	}	DUMMY	DUMMY	DUMMY
if a [ i ] is ' / '	if ( a [ i ] =='/')
	if ( a [ i ] == ' / ' )	NA
decrement ccnt	ccnt -- ;
	ccnt -- ;	1
op = 3	op = 3 ;
	op = 3 ;	1
continue the loop	continue ;
	continue ;	1
}	}	}	DUMMY	DUMMY	DUMMY
if ok ( a [ i ] ) is false , set flag to 0	if (! ok ( a [ i ] ) ) flag = 0 ;
	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }	NA
increase cnt2	cnt2 ++ ;
	cnt2 ++ ;	1
if cnt2 is greater than 16 , set flag to 0	if ( cnt2 > 16 ) flag = 0 ;
	if ( cnt2 > 16 ) flag = 0 ;	1
else	else
	else	1
if cnt2 = 0 or cnt2 is greater than 16 , set flag to 0	if ( cnt2 == 0 || cnt1 > 16 ) flag = 0 ;
	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;	NA
if ccnt = 0 or ccnt is greater than 32 , set flag to 0	if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;
	if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;	1
if ok ( a [ i ] ) is false , set flag to 0	if (! ok ( a [ i ] ) ) flag = 0 ;
	if ( ! ok ( a [ i ] ) ) flag = 0 ;	NA
increase cnt3	cnt3 ++ ;
	cnt3 ++ ;	1
if cnt3 is greater than 16 , set flag to 0	if ( cnt3 > 16 ) flag = 0 ;
	if ( cnt3 > 16 ) flag = 0 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
if op is equal to 1 , set flag to 0	if ( op == 1 ) flag = 0 ;
	if ( op == 1 ) flag = 0 ;	1
if op = 2 and ( cnt2 = 0 or cnt2 is greater than 16 ) , set flag to 0	if ( op == 2 && ( cnt2 == 0 || cnt1 > 16 ) ) flag = 0 ;
	if ( op == 2 && ( cnt2 == 0 || cnt2 > 16 ) ) flag = 0 ;	NA
if op = 3 and ( cnt3 = 0 or cnt3 is greater than 16 ) , set flag to 0	if ( op == 3 && ( cnt3 == 0 || cnt1 > 16 ) ) flag = 0 ;
	if ( op == 3 && ( cnt3 == 0 || cnt3 > 16 ) ) flag = 0 ;	NA
if flag is true	if ( flag )
	if ( flag )	1
print " YES " and a new line	cout << " YES " << endl ;
	cout << " YES " << endl ;	1
else	else
	else	1
print " NO " and a new line	cout << " NO " << endl ;
	cout << " NO " << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
