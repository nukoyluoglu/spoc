let a , b be long integers	long long a, b ;
	long long a , b ;	NA
ans = array of long integers of length 100	long long ans [ 100 ] ;
	long long ans [ 100 ] ;	1
let flag be a integer with flag = 0	int flag = 0 ;
	int flag = 0 ;	1
let k be a integer	int k ;
	int k ;	1
let void dfs ( long long a , int i ) be a dfs function	void dfs ( long long a, int i )
	void dfs ( long long a , int i )	NA
if flag or a greater than b , return the value	if ( flag || a > b ) return 0 ;
	if ( flag || a > b ) { return ; }	NA
the value of ans [ i ] = a	ans [ i ] = a ;
	ans [ i ] = a ;	1
if a is equal to b	if ( a == b )
	if ( a == b )	1
flag is equal to 1	flag = 1 ;
	flag = 1 ;	1
k value is assigned to i	i = k ;
	k = i ;	NA
return	return ;
	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
depth first search of a * 2 , i + 1	dfs ( a * 2, i + 1 ) ;
	dfs ( a * 2 , i + 1 ) ;	NA
depth first search of a * 10 + 1 , i + 1	dfs ( a * 10 + 1, i + 1 ) ;
	dfs ( a * 10 + 1 , i + 1 ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
read a , b	cin >> a >> b ;
	cin >> a >> b ;	1
depth first search of a , 0	dfs ( a, 0 ) ;
	dfs ( a , 0 ) ;	NA
if flag is equal to 0	if ( flag == 0 )
	if ( flag == 0 )	1
print NO and newline	cout << " NO " << endl ;
	cout << " NO " << endl ;	1
else do the following	else
	else	1
print YES and newline	cout << " YES " << endl ;
	cout << " YES " << endl ;	1
print k + 1 and newline	cout << k + 1 << endl ;
	cout << k + 1 << endl ;	1
print ans [ 0 ]	cout << ans [ 0 ] << endl ;
	cout << ans [ 0 ] ;	NA
for i = 1 to k inclusive , print space and ans [ i ]	for ( int i = 1 ; i <= k ; i ++ ) cout << " " << ans [ i ] << endl ;
	for ( int i = 1 ; i <= k ; i ++ ) { cout << ' ' << ans [ i ] ; }	NA
print newline	cout << endl ;
	cout << endl ;	1
}	}	}	DUMMY	DUMMY	DUMMY
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
