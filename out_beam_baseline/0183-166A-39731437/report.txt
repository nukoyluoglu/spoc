declare const int N = 50 + 5	const int N = 50 + 5 ;	const int N = 50 + 5 ;	1
create integers n , k and res	int n, k, res ;	int n , k , res ;	NA
create an array of int - int pairs a with size N	pair < int, int > a [ N ] ;	pair < int , int > a [ N ] ;	NA
declare boolean function cmp that takes pairs of int - int a and b as an arguments	bool cmp ( pair < int, int > ( a, b ) )	bool cmp ( pair < int , int > a , pair < int , int > b )	NA
if a . first is greater than b . first	if ( a. first > b. first )	if ( a . first > b . first )	NA
return true	return true ;	return true ;	1
else if a . first is equal to b . first	else if ( a. first == b. first )	else if ( a . first == b . first )	NA
if a . second is less than b . second , return true	if ( a. second < b. second ) return true ;	if ( a . second < b . second ) return true ;	NA
return false	return false ;	return false ;	1
else	else	else	1
return false	return false ;	return false ;	1
}	}	}	DUMMY	DUMMY	DUMMY
define function Input	void Input ( )	void Input ( )	1
read n and k	cin >> n >> k ;	cin >> n >> k ;	1
for i from 1 to n inclusive , read input to a [ i ] . first and a [ i ] . second	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]. first >> n ; }	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;	NA
sort a from position 1 to n + 1 using cmp as a comparator method	sort ( a + 1, a + n + 1 + cmp ) ;	sort ( a + 1 , a + n + 1 , cmp ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
function Solve	void Solve ( )	void Solve ( )	1
declare int problems = a [ k ] . first and penalty = a [ k ] . second	int problems = strcmp ( a [ k ]. first, " penalty " ) ;	int problems = a [ k ] . first , penalty = a [ k ] . second ;	NA
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )	for ( int i = 1 ; i <= n ; i ++ )	1
if a [ i ] . first = problems and a [ i ] . second is equal to penalty , increment res	if ( a [ 1 ]. first == problems && a [ i ]. second == penalty ) res ++ ;	if ( a [ i ] . first == problems && a [ i ] . second == penalty ) res ++ ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
print res and ' \ n '	cout << res <<'\n';	cout << res << ' \n ' ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
call Input ( )	Input ( ) ;	Input ( ) ;	1
call Solve ( )	Solve ( ) ;	Solve ( ) ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
