create llin with no arguments , returning long long integer	long long int llin ( )	long long int llin ( )	1
create long long integer tmp	long long int tmp ;	long long int tmp ;	1
read tmp	cin >> tmp ;	cin >> tmp ;	1
return tmp from function	return tmp ;	return tmp ;	1
}	}	}	DUMMY	DUMMY	DUMMY
declare solve with no arguments , returning void	void solve ( )	void solve ( )	1
create long long integer nsticks with nsticks = result of run llin	long long int nsticks = llin ( ) ;	long long int nsticks = llin ( ) ;	1
create long long integer array lengths with size nsticks	long long int lengths [ nsticks ] ;	long long int lengths [ nsticks ] ;	1
create long long integer min with min = 101	long long int min = 101 ;	long long int min = 101 ;	1
create long long integer max with max = 0	long long int max = 0 ;	long long int max = 0 ;	1
for i = 0 to nsticks exclusive	for ( int i = 0 ; i < nsticks ; i ++ )	for ( long long int i = 0 ; i < nsticks ; i ++ )	5
create long long integer tmp with tmp = result of run llin	long long int tmp = llin ( ) ;	long long int tmp = llin ( ) ;	1
set lengths [ i ] to tmp	lengths [ i ] = tmp ;	lengths [ i ] = tmp ;	1
if tmp is greater than max , set max to tmp	if ( tmp > max ) max = tmp ;	if ( tmp > max ) max = tmp ;	1
if tmp is less than min , set min to tmp	if ( tmp < min ) min = tmp ;	if ( tmp < min ) min = tmp ;	1
}	}	}	DUMMY	DUMMY	DUMMY
create long long integer min_t with min_t to min	long long int min_t = min ;	long long int min_t = min ;	1
create long long integer min_cost with min_cost = 1000005	long long int min_cost = 1000005 ;	long long int min_cost = 1000005 ;	1
for t = min to max + 1 exclusive	for ( int t = min ; t < max + 1 ; t ++ )	for ( long long int t = min ; t < max + 1 ; t ++ )	NA
create long long integer tmp_cost with tmp_cost = 0	long long int tmp_cost = 0 ;	long long int tmp_cost = 0 ;	1
for i = 0 to nsticks exclusive	for ( int i = 0 ; i < nsticks ; i ++ )	for ( long long int i = 0 ; i < nsticks ; i ++ )	5
create long long integer tmp_length with tmp_length = lengths [ i ]	long long int tmp_length = lengths [ i ] ;	long long int tmp_length = lengths [ i ] ;	1
if tmp_length is greater than t + 1	if ( tmp_length > t + 1 )	if ( tmp_length > t + 1 )	1
increment tmp_cost by tmp_length - ( t + 1 )	tmp_cost += tmp_length - ( t + 1 ) ;	tmp_cost += tmp_length - ( t + 1 ) ;	1
else if tmp_length is less than t - 1	else if ( tmp_length < t - 1 )	else if ( tmp_length < t - 1 )	1
increment tmp_cost by t - 1 - tmp_length	tmp_cost += t - 1 - tmp_length ;	tmp_cost += t - 1 - ( tmp_length ) ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
if min_cost is greater than tmp_cost	if ( min_cost > tmp_cost )	if ( min_cost > tmp_cost )	1
set min_t to t	min_t = t ;	min_t = t ;	1
set min_cost to tmp_cost	min_cost = tmp_cost ;	min_cost = tmp_cost ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print min_t print " " print min_cost print ' \ n '	cout << ( min_t ) << " " << min_cost <<'\n';	cout << min_t << " " << min_cost << ' \n ' ;	NA
return from function	return ;	return ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create integer TESTS with TESTS = 1	int TESTS = 1 ;	int TESTS = 1 ;	1
while decrement TESTS is true , run solve	while ( TESTS -- ) solve ( ) ;	while ( TESTS -- ) { solve ( ) ; }	2
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
