create constant double PI with PI = acosign of - 1	const double PI = acos ( - 1 ) ;	const double PI = acos ( - 1 ) ;	1
create constant integer MAX with MAX = 2e9 + 7	const int MAX = 2e9 + 7 ;	const int MAX = 2e9 + 7 ;	1
create constant long long MOD with MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;	const long long MOD = 1e9 + 7 ;	1
create map m from character to integer	map < char, int > m ;	map < char , int > m ;	NA
declare solve with no arguments , returning void	void solve ( )	void solve ( )	1
create integer k	int k ;	int k ;	1
read k	cin >> k ;	cin >> k ;	1
create string s	string s ;	string s ;	1
read s	cin >> s ;	cin >> s ;	1
create integer n with n = size of s	int n = s. size ( ) ;	int n = s . size ( ) ;	NA
if n % k is not 0	if ( n % k!= 0 )	if ( n % k != 0 )	NA
print - 1 print newline	cout << - 1 << endl ;	cout << - 1 << endl ;	1
return false from function	return false ;	return ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
create integer need with need = n / k	int need = n / k ;	int need = n / k ;	1
for i = 0 to n exclusive , increment m [ s [ i ] ]	for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }	for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }	1
create string t with t = " "	string t = " " ;	string t = " " ;	1
for i = 97 to 123 exclusive	for ( int i = 97 ; i < 123 ; i ++ )	for ( int i = 97 ; i < 123 ; i ++ )	1
if m [ character casted i ] % k is 0	if ( m [ ( char ) i ] % k == 0 )	if ( m [ char ( i ) ] % k == 0 )	8
for j = 0 to m [ character casted i ] / k exclusive , increment by character casted i	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { cin >> s [ j ] ; }	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( i ) ; }	NA
else	else	else	1
print - 1 print newline	cout << - 1 << endl ;	cout << - 1 << endl ;	1
return false from function	return false ;	return ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
for i = 0 to k exclusive , print t	for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }	for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }	1
print newline	cout << endl ;	cout << endl ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
run solve	solve ( ) ;	solve ( ) ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
