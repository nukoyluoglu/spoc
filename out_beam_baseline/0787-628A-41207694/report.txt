INF = const long long int with INF = ( 1LL bitshift left by 60 ) - 1	const long long int INF = ( 1LL << 60 ) - 1 ;	const long long int INF = ( 1LL << 60 ) - 1 ;	1
MAX = const long long int with MAX = 2000001	const long long int MAX = 2000001 ;	const long long int MAX = 2000001 ;	1
in function fast_exp taking three long long ints base , exp and m and returning a long long int	long long int fast_exp ( int base, int exp, long long int m )	long long int fast_exp ( long long int base , long long int exp , long long int m )	NA
res = long long int with res = 1	long long int res = 1 ;	long long int res = 1 ;	1
loop while exp is greater than 0	while ( exp > 0 )	while ( exp > 0 )	1
if exp is uneven set res to ( res * base ) mod m	if ( exp % 2 == 1 ) res = ( res * base ) % m ;	if ( exp % 2 == 1 ) { res = ( res * base ) % m ; }	NA
set base to ( base * base ) mod m	base = ( base * base ) % m ;	base = ( base * base ) % m ;	1
set exp to exp / 2	exp /= 2 ;	exp /= 2 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
return res mod m	return res % m ;	return res % m ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
n , b , p = int	int n, b, p ;	int n , b , p ;	NA
read n then b then p	cin >> n >> b >> p ;	cin >> n >> b >> p ;	1
bottle , towel = int with bottle = 0 and towel = 0	int bottle = 0, towel = 0 ;	int bottle = 0 , towel = 0 ;	NA
set towel to p * n	towel = p * n ;	towel = p * n ;	1
loop while n is greater than 1	while ( n > 1 )	while ( n > 1 )	1
k = int with k = 1	int k = 1 ;	int k = 1 ;	1
loop while k is less or equal to n set k to k * 2	while ( k <= n ) k *= 2 ;	while ( k <= n ) { k *= 2 ; }	2
set k to k / 2	k /= 2 ;	k /= 2 ;	1
set n to ( n - k ) + k / 2	n = ( n - k ) + k / 2 ;	n = ( n - k ) + k / 2 ;	1
increment bottle by ( k / 2 ) * ( 2 * b + 1 )	bottle += ( k / 2 ) * ( 2 * b + 1 ) ;	bottle += ( k / 2 ) * ( 2 * b + 1 ) ;	1
}	}	}	DUMMY	DUMMY	DUMMY
print bottle and towel	cout << bottle << " " << towel << endl ;	cout << bottle << " " << towel << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
