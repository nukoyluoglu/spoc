s = string	string s ;	string s ;	1
ans = string array of size 111111	string ans [ 111111 ] ;	string ans [ 111111 ] ;	1
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
call getline of cin and s	getline ( cin, s ) ;	getline ( cin , s ) ;	NA
n , p = int with n = size of s and p = 0	int n = s. size ( ), p = 0 ;	int n = s . size ( ) , p = 0 ;	NA
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )	for ( int i = 0 ; i < n ; i ++ )	1
if s [ i ] equals ' , ' or ' . ' or ' ! ' or ' ? '	if ( strcmp ( s [ i ], '. ', '!'|| '?') == 0 )	if ( s [ i ] == ' , ' || s [ i ] == ' . ' || s [ i ] == ' ! ' || s [ i ] == ' ? ' )	NA
set ans [ p ] to " " then increment p	ans [ p ++ ] = " " ;	ans [ p ++ ] = " " ;	1
set ans [ p - 1 ] [ 0 ] to s [ i ]	ans [ p - 1 ] [ 0 ] = s [ i ] ;	ans [ p - 1 ] [ 0 ] = s [ i ] ;	1
else if s [ i ] is a lowercase character	else if ( islower ( s [ i ] ) )	else if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )	NA
j = int with j = i	int j = i ;	int j = i ;	1
loop while s [ j ] is a lowercase character and j is less than n increment j	while ( islower ( s [ j ] ) && j < n ) { j ++ ; }	for ( ; s [ j ] >= ' a ' && s [ j ] <= ' z ' && j < n ; ) { j ++ ; }	NA
set ans [ p ] to result of s . substr of i and j - i then increment p	ans [ p ++ ] = s. substr ( i, j - i ) ;	ans [ p ++ ] = s . substr ( i , j - i ) ;	NA
set i to j - 1	i = j - 1 ;	i = j - 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
l = int with l = 0	int l = 0 ;	int l = 0 ;	1
for i = 0 to p	for ( int i = 0 ; i < p ; i ++ )	for ( int i = 0 ; i < p ; i ++ )	1
if ans [ i ] [ 0 ] is greater or equal to ' a '	if ( ans [ i ] [ 0 ] >='a')	if ( ans [ i ] [ 0 ] >= ' a ' )	NA
if l equals 1 print ' '	if ( l == 1 ) cout <<' ';	if ( l == 1 ) { cout << ' ' ; }	NA
print ans [ i ]	cout << ans [ i ] << endl ;	cout << ans [ i ] ;	2
set l to 1	l = 1 ;	l = 1 ;	1
else	else	else	1
print ans [ i ] and ' '	cout << ans [ i ] <<' ';	cout << ans [ i ] << ' ' ;	NA
set l to 0	l = 0 ;	l = 0 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
print newline	cout << endl ;	cout << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
