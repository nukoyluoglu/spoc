create constant integer MAXN with MAXN = 100000 + 10	const int MAXN = 100000 + 10 ;	const int MAXN = 100000 + 10 ;	1
create constant long double eps with eps = 1e - 10	const long double eps = 1e-10 ;	const long double eps = 1e-10 ;	1
create integer array cnt with size MAXN	int cnt [ MAXN ] ;	int cnt [ MAXN ] ;	1
declare check with integer n as argument , returning integer	int check ( int n )	int check ( int n )	1
for i = 0 to i + 2 is less than n , incrementing i	for ( int i = 0 ; i + 2 < n ; i ++ )	for ( int i = 0 ; i + 2 < n ; i ++ )	1
if cnt [ i ] is 0 , break current loop iteration	if ( cnt [ i ] == 0 ) continue ;	if ( cnt [ i ] == 0 ) continue ;	1
if cnt [ i ] is greater than or equal to 2 and cnt [ i + 1 ] is greater than or equal to 0 , return 1 from function	if ( tf [ i ] >= 2 && cnt [ i + 1 ] >= 0 ) return 1 ;	if ( cnt [ i ] >= 2 && cnt [ i + 1 ] >= 0 ) return 1 ;	NA
if cnt [ i ] is less than or equal to - 2 and cnt [ i + 1 ] is less than or equal to 0 , return - 1 from function	if ( tf [ i ] <= - 2 && cnt [ i + 1 ] <= 0 ) return - 1 ;	if ( cnt [ i ] <= - 2 && cnt [ i + 1 ] <= 0 ) return - 1 ;	NA
increment cnt [ i + 1 ] by cnt [ i ]	cn [ i + 1 ] += cnt [ i ] ;	cnt [ i + 1 ] += cnt [ i ] ;	NA
increment cnt [ i + 2 ] by cnt [ i ]	cn [ i + 2 ] += cnt [ i ] ;	cnt [ i + 2 ] += cnt [ i ] ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
create long double p with p = square root of ( long double casted 5 ) + 1	long double p = sqrt ( ( long double ) 5 ) + 1 ;	long double p = sqrt ( ( long double ) 5 ) + 1 ;	1
set p to p / 2	p /= 2 ;	p /= 2 ;	1
create long double ret with ret = p * cnt [ n - 2 ] + cnt [ n - 1 ]	long double ret = ( p * cnt [ n - 2 ] ) + ( n - 1 ] ) ;	long double ret = p * cnt [ n - 2 ] + cnt [ n - 1 ] ;	NA
if absolute value of ret is less than eps , return 0 from function	if ( abs ( ret ) < eps ) return 0 ;	if ( fabs ( ret ) < eps ) return 0 ;	55
if ret is greater than 0 , return 1 from function	if ( ret > 0 ) return 1 ;	if ( ret > 0 ) return 1 ;	1
return - 1 from function	return - 1 ;	return - 1 ;	1
}	}	}	DUMMY	DUMMY	DUMMY
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create strings s1 , s2	string s1, s2 ;	string s1 , s2 ;	NA
read s1 read s2	cin >> s1 >> s2 ;	cin >> s1 >> s2 ;	1
create integer n with n = maximum of size of s1 and size of s2	int n = max ( s1. size ( ), strlen ( s2 ) ) ;	int n = max ( s1 . size ( ) , s2 . size ( ) ) ;	NA
if size of s1 is less than n , set s1 to string initialized with ( n - size of s1 , ' 0 ' ) + s1	if ( strlen ( s1 ) < n ) s1 = string ( n - s1. size ( ),'0') + s1 ;	if ( s1 . size ( ) < n ) s1 = string ( n - s1 . size ( ) , ' 0 ' ) + s1 ;	NA
if size of s2 is less than n , set s2 to string initialized with ( n - size of s2 , ' 0 ' ) + s2	if ( strlen ( s2 ) < n ) s2 = string ( n - s2. size ( ),'0') + s2 ;	if ( s2 . size ( ) < n ) s2 = string ( n - s2 . size ( ) , ' 0 ' ) + s2 ;	NA
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )	for ( int i = 0 ; i < n ; i ++ )	1
create integer a with a = s1 [ i ] - ' 0 '	int a = s1 [ i ] -'0';	int a = s1 [ i ] - ' 0 ' ;	NA
create integer b with b = s2 [ i ] - ' 0 '	int b = s2 [ i ] -'0';	int b = s2 [ i ] - ' 0 ' ;	NA
set cnt [ i ] to a - b	cnt [ i ] = a - b ;	cnt [ i ] = a - b ;	1
}	}	}	DUMMY	DUMMY	DUMMY
create integer ret with ret = result of run check with n as argument	int ret = check ( n ) ;	int ret = check ( n ) ;	1
if ret is 0	if ( ret == 0 )	if ( ret == 0 )	1
print " = " print newline	cout << " = " << endl ;	cout << " = " << endl ;	1
else if ret is - 1	else if ( ret == - 1 )	else if ( ret == - 1 )	1
print " < " print newline	cout << " < " << endl ;	cout << " < " << endl ;	1
else	else	else	1
print " > " print newline	cout << " > " << endl ;	cout << " > " << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
