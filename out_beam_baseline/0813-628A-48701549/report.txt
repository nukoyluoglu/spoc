int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
let m , b , p , total , total_p be integers with total = 0	int m, b, p, total = 0, total_p ;	int m , b , p , total = 0 , total_p ;	NA
read m , b , p	cin >> m >> b >> p ;	cin >> m >> b >> p ;	1
the value of total_p = m * p	total_p = m * p ;	total_p = m * p ;	1
while 1 is an infinite loop since condition is always true	while ( 1 )	while ( 1 )	1
le k be a integer with k = [ ] ( int n ) - > int	int k = [ ] ( int n ) -> int ( ) ;	int k = [ ] ( int n ) -> int	NA
let i , res be integers with i = 1 , res = 2 ^ 0	int i = 1, res = pow ( 2, 0 ) ;	int i = 1 , res = pow ( 2 , 0 ) ;	NA
while 1 is an infinite loop since condition is always true	while ( 1 )	while ( 1 )	1
let temp be a integer with temp = 2 ^ i	int temp = pow ( 2, i ) ;	int temp = pow ( 2 , i ) ;	NA
if temp is greater than n , stop	if ( temp > n ) break ;	if ( temp > n ) break ;	1
the value of res = temp	res = temp ;	res = temp ;	1
increment i by 1	i ++ ;	i ++ ;	1
}	}	}	DUMMY	DUMMY	DUMMY
return the value of res	return res ;	return res ;	1
m	m = s. size ( ) ;	( m ) ;	NA
let matches be a integer with matches = k / 2	int matches = k / 2 ;	int matches = k / 2 ;	1
increment total by matches * ( 2 * b )	total += matches * ( 2 * b ) ;	total += matches * ( 2 * b ) ;	1
increment total by matches	total += matches ;	total += matches ;	1
the value of m = ( k / 2 ) + ( m - k )	m = ( k / 2 ) + ( m - k ) ;	m = ( k / 2 ) + ( m - k ) ;	1
if matches is equal to 0 , stop	if ( matches == 0 ) break ;	if ( matches == 0 ) break ;	1
}	}	}	DUMMY	DUMMY	DUMMY
print total and space and total_p and newline	cout << total << " " << total_p << endl ;	cout << total << " " << total_p << endl ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
