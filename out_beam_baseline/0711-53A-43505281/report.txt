create integer constants OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 2e5 + 5 and mod = 1e9 + 7	const int OO = - 1 * OO, N = 2e5 + 5, mod = 1e9 + 7 ;	const int OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 2e5 + 5 , mod = 1e9 + 7 ;	NA
int main() {	int main() {	int main() {	DUMMY	DUMMY	DUMMY
create new string variable x	string x ;	string x ;	1
read variable x from the input	cin >> x ;	cin >> x ;	1
create integer n	int n ;	int n ;	1
read input to n	cin >> n ;	cin >> n ;	1
arr is a new array of strings with size n	string arr [ n ] ;	string arr [ n ] ;	1
for c from 0 to n exclusive , read standard input to arr [ c ]	for ( int c = 0 ; c < n ; c ++ ) { cin >> arr [ c ] ; }	for ( int c = 0 ; c < n ; c ++ ) { cin >> arr [ c ] ; }	1
sort arr from 0 to n	sort ( arr, arr + n ) ;	sort ( arr , arr + n ) ;	NA
start for loop from c = 0 to n exclusive incrementing c	for ( int c = 0 ; c < n ; c ++ )	for ( int c = 0 ; c < n ; c ++ )	1
declare boolean flag = 1	bool flag = 1 ;	bool flag = 1 ;	1
for integer i = 0 to the size of x exclusive	for ( int i = 0 ; i < x. size ( ) ; i ++ )	for ( int i = 0 ; i < ( ( int ) ( ( x ) . size ( ) ) ) ; i ++ )	NA
change flag to 0 if i is less than size of arr [ c ] and x [ i ] ! = arr [ c ] [ i ]	if ( i < arr [ 2 ]. size ( ) && x [ i ]!= arr [ c ] [ 1 ] ) flag = 0 ;	if ( i < ( ( int ) ( ( arr [ c ] ) . size ( ) ) ) && x [ i ] != arr [ c ] [ i ] ) flag = 0 ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
if flag is not 0 , return cout < < arr [ c ] < < " \ n " , 0	if ( flag ) return cout << arr [ c ] << " \n ", 0 ;	if ( flag ) return cout << arr [ c ] << " \n " , 0 ;	NA
}	}	}	DUMMY	DUMMY	DUMMY
print x and " \ n " to the standard output	cout << x << " \n " ;	cout << x << " \n " ;	1
return 0;	return 0;	return 0;	DUMMY	DUMMY	DUMMY
}	}	}	DUMMY	DUMMY	DUMMY
